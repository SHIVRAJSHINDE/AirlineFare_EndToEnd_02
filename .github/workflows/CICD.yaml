name: CICD Pipeline

on: 
  push:
    branches:
      - main  # Optionally specify the branch that triggers the pipeline.

jobs:
  CICD_Pipeline_Test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        # upload code on github
        uses: actions/checkout@v3
    
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with: 
          python-version: '3.11.7'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install dvc mlflow  # Install DVC and MLflow explicitly if not in requirements.txt


      - name: Run DVC pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: dvc repro  # Ensure DVC is initialized and the pipeline is configured correctly.

      #- name: Run Flask app tests
      #  if: success()
      #  env:
      #    DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #  run: python -m unittest tests/test_flask_app.py

      - name: Login to AWS ECR
        run: | 
          aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY_ID}}
          aws configure set aws_secret_access_key ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 905418096737.dkr.ecr.ap-south-1.amazonaws.com

      #- name: Build Docker Image
      #  run: |
      #    docker build -t new_ecr .


      #  Tag Docker Image
      #- name: Tag Docker Image
      #  run: |
      #    docker tag new_ecr:latest 905418096737.dkr.ecr.ap-south-1.amazonaws.com/new_ecr:latest

      - name: Push Docker Imange to AWS ECR
        run: |
          docker push 905418096737.dkr.ecr.ap-south-1.amazonaws.com/new_ecr:latest

      # Zip the required files
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload the ZIP file to S3
      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://cu-codedeploy-bucket/deployment.zip

      # Deploy to AWS CodeDeploy using the uploaded ZIP file
      # Deploy to AWS CodeDeploy using the uploaded ZIP file

      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name MyDockerApp2 \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name MyDockerAppASGDeploymentGroup \
            --s3-location bucket=cu-codedeploy-bucket,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-south-1



